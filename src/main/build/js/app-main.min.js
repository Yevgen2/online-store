const categoriesUrl = '../../categories.json';
const productsUrl = '../../products.json';
const commentsUrl = '../../comments.json';
let productIdForProductDetail;
const emptyProfileAvatar = 'img/product/empty-profile.png';;const initLocalStorage = () => {
	if (!localStorage.getItem('cart')) {
		localStorage.setItem('cart', JSON.stringify([]));
	}
	changeCountOfCardIcon();
}

const changeCountOfCardIcon = count => {
	if (count === 0) {
		$('.nav-shop__circle').text('');
	} else if (count) {
		$('.nav-shop__circle').text(count);
	} else {
		const cart = JSON.parse(localStorage.getItem('cart'));
		let countOfAllProductsInCart = calculateCountOfAllProductsInCart(cart);
		if (countOfAllProductsInCart > 0) {
			changeCountOfCardIcon(countOfAllProductsInCart);
		}
	}
}

const addProductToCart = event => {
	event.stopPropagation()
	const productId = event.currentTarget.dataset.id;

	const cart = JSON.parse(localStorage.getItem('cart'));

	let isInAlreadyInCart = false;
	cart.forEach(item => {
		if (item.productId === productId) {
			item.count++;
			isInAlreadyInCart = true;
		}
	})
	if (!isInAlreadyInCart) {
		cart.push({productId: productId, count: 1});
	}

	let countOfAllProductsInCart = calculateCountOfAllProductsInCart(cart);

	changeCountOfCardIcon(countOfAllProductsInCart);

	localStorage.setItem('cart', JSON.stringify(cart));
}

const calculateCountOfAllProductsInCart = (cart) => {
	let count = 0;
	cart.forEach(item => {
		count += item.count;
	});
	return count;
}

const cartListener = () => {
	$('.ti-shopping-cart').click(showModalCart);
}

const showModalCart = event => {
	$('.cart_area').addClass('modal-window');
	document.querySelector('body .modal-shadow').style.display = 'block';
	$('.table > tbody').html('');

	event.preventDefault();

	fillCart();

	const closeButton = document.querySelector('.close-button');
	closeButton.addEventListener('click', hideModalCart);
}

const hideModalCart = () => {
	$('.cart_area').removeClass('modal-window');
	document.querySelector('body .modal-shadow').style.display = 'none';
}

const fillCart = () => {
	const productsInCart = JSON.parse(localStorage.getItem('cart'));
	fetch(productsUrl)
			.then(res => res.json())
			.then(res => {
				let isEmptyCart = true;
				let productInCartNumber = 1;
				res.forEach(product => {
					productsInCart.forEach(productInCart => {
						if (product.id === productInCart.productId) {
							isEmptyCart = false;
							createBlockWithProductInCart(product, productInCart.count, productInCartNumber++);
						}
					})
				})
				if (isEmptyCart) {
					if (document.getElementById('btn-for-buy-form')) {
						document.getElementById('btn-for-buy-form').remove();
					}

					const row = document.createElement('tr');
					const cell = document.createElement('td');
					cell.className = 'empty-cart-message';
					cell.textContent = 'Cart is Empty';
					cell.setAttribute('colspan', '4');
					row.appendChild(cell);
					$('.table > tbody').append(row);
				} else {
					if (document.getElementById('btn-for-buy-form')) {
						return;
					}

					const purchaseBtn = document.createElement('button');
					purchaseBtn.setAttribute('type', 'button');
					purchaseBtn.setAttribute('id', 'btn-for-buy-form');
					purchaseBtn.textContent = 'Checkout';
					purchaseBtn.className = 'button';
					purchaseBtn.addEventListener('click', function () {
						window.location.hash = '#checkout';
					});

					$('.cart_inner').append(purchaseBtn);
				}
			});
}

const createBlockWithProductInCart = (product, count, productInCartNumber) => {
	const {id, brand, model, price, img} = product;
	const parentTrOfProductInCart = $('<tr/>', {
		'data-productnum': productInCartNumber,
		'data-id': id,
		'data-price': price,
		'data-count': count,
		id: `product-in-cart-num-${productInCartNumber}`
	});
	const imgWithBrand = $('<td/>').appendTo(parentTrOfProductInCart);
	$(imgWithBrand).append($('<div/>').addClass('media')
			.append($('<div/>').addClass('cart-product-image-container')
					.append($(`<img src="${img}">`).addClass('cart-product-image')))
			.append($('<div/>').addClass('media-body').append($('<p/>', {text: `${brand} ${model}`}))));

	const priceBlock = $('<td/>').appendTo(parentTrOfProductInCart);
	priceBlock.append($('<h5/>', {text: `${price} UAH`}).addClass('product-in-cart-price'));

	const countBlock = $('<td/>').appendTo(parentTrOfProductInCart);
	countBlock.append($('<div/>').addClass('product_count')
			.append($('<button/>', {type: 'button', text: '-'}).addClass('product_count').click(removeOneProductFromCart))
			.append($('<div/>', {
				'data-count': count,
				text: count
			}).addClass('product-in-cart-count').css('margin-top', '5px'))
			.append($('<button/>', {type: 'button', text: '+'}).addClass('product_count').click(addOneProductToCart)));

	const totalPriceBlock = $('<td/>').appendTo(parentTrOfProductInCart);
	totalPriceBlock.append($('<h5/>', {text: `${price * count} UAH`}).addClass('product-in-cart-price-total'));

	const deleteProductBlock = $('<td/>').appendTo(parentTrOfProductInCart);
	deleteProductBlock.append($('<div/>').addClass('product-delete').click(deleteProductFromCart));

	$('.table > tbody').prepend(parentTrOfProductInCart);
}

const deleteProductFromCart = event => {
	const productInCartId = event.target.parentElement.parentElement.dataset.id;
	let productInNumber = event.target.parentElement.parentElement.dataset.productnum;

	const productBlock = $(`#product-in-cart-num-${productInNumber}`);

	let cart = JSON.parse(localStorage.getItem('cart'));

	let newCart = [];

	productBlock.remove();
	cart.find(productInCart => {
				if (productInCart.productId !== productInCartId && cart.length > 1) {
					newCart.push(productInCart);
					localStorage.setItem('cart', JSON.stringify(newCart));
					changeCountOfCardIcon();
				} else if (productInCart.productId === productInCartId && cart.length < 2) {
					localStorage.setItem('cart', JSON.stringify(newCart));

					$('#btn-for-buy-form').remove();

					const row = document.createElement('tr');
					const cell = document.createElement('td');
					cell.className = 'empty-cart-message';
					cell.textContent = 'Cart is Empty';
					cell.setAttribute('colspan', '4');
					row.appendChild(cell);
					$('.table > tbody').append(row);

					changeCountOfCardIcon(0);
				}
			}
	);
}

const removeOneProductFromCart = event => {
	const productInCartId = event.target.parentElement.parentElement.parentElement.dataset.id;
	let count = parseInt(event.target.parentElement.parentElement.parentElement.dataset.count);
	let productInNumber = event.target.parentElement.parentElement.parentElement.dataset.productnum;
	let price = event.target.parentElement.parentElement.parentElement.dataset.price;

	const productBlock = $(`#product-in-cart-num-${productInNumber}`);

	let cart = JSON.parse(localStorage.getItem('cart'));

	// let newCart = [];
	if (count === 1) {
		return
		// productBlock.remove();
		// cart.find(productInCart => {
		// 			if (productInCart.productId !== productInCartId && cart.length > 1) {
		// 				newCart.push(productInCart);
		// 				localStorage.setItem('cart', JSON.stringify(newCart));
		// 			} else if (productInCart.productId === productInCartId && cart.length < 2) {
		// 				localStorage.setItem('cart', JSON.stringify(newCart));

		// 				$('#btn-for-buy-form').remove();
		// 				$('<div/>', {text: 'Cart is empty'}).appendTo($('.table > tbody'));
		// 				changeCountOfCardIcon(0);
		// 			}
		// 		}
		// );
	} else {
		cart.find(productInCart => {
			if (productInCart.productId === productInCartId) {
				productInCart.count = --count;
				$(`#product-in-cart-num-${productInNumber} .product-in-cart-count`).text(`${count}`);
				$(`#product-in-cart-num-${productInNumber} .product-in-cart-price-total`).text(`${price * count} UAH`);
				$(`#product-in-cart-num-${productInNumber}`).attr('data-count', count);
				localStorage.setItem('cart', JSON.stringify(cart));
			}
		});
	}
	changeCountOfCardIcon();
}

const addOneProductToCart = event => {
	const productInCartId = event.target.parentElement.parentElement.parentElement.dataset.id;
	let productInCartCount = parseInt(event.target.parentElement.parentElement.parentElement.dataset.count);
	let productInNumber = event.target.parentElement.parentElement.parentElement.dataset.productnum;
	let price = event.target.parentElement.parentElement.parentElement.dataset.price;

	let cart = JSON.parse(localStorage.getItem('cart'));

	cart.find(productInCart => {
		if (productInCart.productId === productInCartId) {
			productInCart.count = ++productInCartCount;
		}
	});

	localStorage.setItem('cart', JSON.stringify(cart));

	$(`#product-in-cart-num-${productInNumber} .product-in-cart-count`).text(`${productInCartCount}`);
	$(`#product-in-cart-num-${productInNumber} .product-in-cart-price-total`).text(`${price * productInCartCount} UAH`);
	$(`#product-in-cart-num-${productInNumber}`).attr('data-count', productInCartCount);
	changeCountOfCardIcon();
};const categoriesStartListener = () => {
	$('#category-btn').click(function (e) {
		e.preventDefault();
		window.location.hash = '#categories';
	});
	$('.button-hero').click(function (e) {
		e.preventDefault();
		window.location.hash = '#categories';
	});
	$('#category-footer').click(function (e) {
		e.preventDefault();
		window.location.hash = '#categories';
	});
};

// const createCategories = event => {
//     event.preventDefault();
//     $('.hero-banner').remove();
//     $('#categories-block').remove();
//     $('#products-block').remove();
//     const categories = $('<div/>', {id: 'categories-block'}).prependTo($('.site-main'));
//     categories.append($('<div/>').addClass('container'));
//     fetch(categoriesUrl)
//         .then(res => {
//             return res.json();
//         })
//         .then(res => {
//             createBlockOfCategories(res);
//         })
//         .catch(reject => {
//             console.log("Ups");
//             console.log(reject);
//         });
// };

const showCategories = () => {
	$('section').removeClass('active');
	$('.category-page').addClass('active');
}

const createCategories = event => {
	// event.preventDefault();
	$('#check-active').children().removeClass('active');
	$('#category-btn').parent().addClass('active');
	$('section').removeClass('active');
	$('.category-page').addClass('active');

	const parent = document.querySelector('.category-list .row');
	parent.innerHTML = '';

	const productsBlock = document.createElement('div');
	productsBlock.textContent = "Choose a category you're interested in";
	productsBlock.className = 'products-block';
	parent.appendChild(productsBlock);
	// categories.append($('<div/>').addClass('container'));
	fetch(categoriesUrl)
			.then(res => {
				return res.json();
			})
			.then(res => {
				$('.main-categories ul').children().remove();
				createBlockOfCategories(res);
			})
			.catch(reject => {
				console.log("Oops");
				console.log(reject);
			});
};

const createBlockOfCategories = (response) => {
	response.forEach(categoryItem => {
		const parent = document.querySelector('.main-categories ul');

		const {id, name, description, img} = categoryItem;

		const listItem = document.createElement('li');
		listItem.classList.add("filter-list");

		const radio = document.createElement('input');
		radio.setAttribute('type', 'radio');
		radio.setAttribute('name', 'category');
		radio.setAttribute('id', `category-${id}`);
		radio.setAttribute('category-id', id);
		radio.className = 'pixel-radio';

		const label = document.createElement('label');
		label.setAttribute('for', `category-${id}`);
		label.textContent = name;

		listItem.appendChild(radio);
		listItem.appendChild(label);

		radio.addEventListener('click', () => {
			const filters = document.forms.brandFilters.querySelector('ul');
			filters.innerHTML = '';

			showProductsByFilters(id);
			getBrandsFilterByCategory(id);
			// $('.common-filter form').children().filter('input').prop('checked', false)
			// $(document.forms.filterForm).children().filter('input').prop('checked', false);
		})

		parent.appendChild(listItem);
	})
};;const getBrandsFilterByCategory = categoryId => {
    fetch(productsUrl)
        .then(res => {
            return res.json();
        })
        .then(res => {
            let brandsByCategory = [];
            res.find(product => {
                if (product.categoryId === categoryId) {
                    if (!brandsByCategory.includes(product.brand)) {
                        brandsByCategory.push(product.brand);
                    }
                }
            })
            showFilters(brandsByCategory, categoryId);
        })
        .catch(reject => {
            console.log("Oops");
            console.log(reject);
        });
}

const showFilters = (brands, categoryId) => {
    const parent = document.forms.brandFilters.querySelector('ul');
    parent.innerHTML = '';

    brands.forEach(brand => {
        const listItem = document.createElement('li');
        listItem.classList.add("filter-list");

        const checkbox = document.createElement('input');
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('name', 'brand');
        checkbox.setAttribute('id', `brand-${brand}`);
        checkbox.setAttribute('data-brand', brand);
        checkbox.classList.add('pixel-radio', 'pixel-checkbox');

        const label = document.createElement('label');
        label.setAttribute('for', `brand-${brand}`);
        label.textContent = brand;

        listItem.appendChild(checkbox);
        listItem.appendChild(label);

        parent.appendChild(listItem);
    })

    if (document.querySelector('#filters-apply-button')) {
        document.querySelector('#filters-apply-button').remove();
    }

    const applyButton = document.createElement('button');
    applyButton.setAttribute('type', 'button');
    applyButton.classList.add('button', 'filter-button');
    applyButton.textContent = 'Apply filters';
    applyButton.setAttribute('id', 'filters-apply-button');

    applyButton.addEventListener('click', () => {
        showProductsByFilters(categoryId);
    });

    parent.parentElement.appendChild(applyButton);
}

const showProductsByFilters = categoryId => {
    const filtersContainer = document.forms.brandFilters.querySelector('ul');
    const checkedFilters = [];

    for (let i = 0; i < filtersContainer.children.length; i++) {
        const checkbox = filtersContainer.children[i].querySelector('input');
        if (checkbox.checked) {
            const brand = checkbox.getAttribute('data-brand');
            checkedFilters.push(brand);
        }
    }

    if (checkedFilters.length) {
        showProductsByCategory(categoryId, checkedFilters);
    } else {
        showProductsByCategory(categoryId);
    }
};const showPriceRange = (highestPrice, products) => {
    const form = document.forms.priceRange;
    form.innerHTML = '';

    const fromPrice = document.createElement('input');
    fromPrice.setAttribute('type', 'number');
    fromPrice.setAttribute('placeholder', `0 UAH`);
    fromPrice.setAttribute('min', `0`);
    fromPrice.setAttribute('value', ``);
    fromPrice.className = 'filter-price';

    const fromPriceLabel = document.createElement('label');
    fromPriceLabel.textContent = 'From: ';
    fromPriceLabel.appendChild(fromPrice);

    const toPrice = document.createElement('input');
    fromPrice.setAttribute('type', 'number');
    toPrice.setAttribute('placeholder', `${highestPrice} UAH`);
    toPrice.setAttribute('max', highestPrice);
    toPrice.setAttribute('value', ``);
    toPrice.className = 'filter-price';

    const toPriceLabel = document.createElement('label');
    toPriceLabel.textContent = 'To: ';
    toPriceLabel.appendChild(toPrice);

    if (document.querySelector('#price-apply-button')) {
        document.querySelector('#price-apply-button').remove();
    }

    const actionButton = document.createElement('button');
    actionButton.setAttribute('type', 'button');
    actionButton.classList.add('button', 'filter-button');
    actionButton.textContent = 'Apply price range';
    actionButton.setAttribute('id', 'price-apply-button');

    actionButton.addEventListener('click', () => {
        const userLowestPrice = parseInt(fromPrice.value) || 0;
        const userHighestPrice = parseInt(toPrice.value) || highestPrice;

        getProductsByPriceRange(userLowestPrice, userHighestPrice, products);
    });

    form.appendChild(fromPriceLabel);
    form.appendChild(toPriceLabel);
    form.parentElement.appendChild(actionButton);
}

const getProductsByPriceRange = function (userLowestPrice = 0, userHighestPrice, products) {
    const productsByPriceRange = [];
    products.forEach(product => {
        if (product.price <= userHighestPrice && product.price >= userLowestPrice) {
            productsByPriceRange.push(product);
        }
    })

    createBlockOfProducts(productsByPriceRange);
};const findYourProductListener = () => {
    $('#find-your-product-btn').click(function (e) {
        e.preventDefault();
        window.location.hash = '#search';
    })
};


const showSearchingPage = () => {
    $('#check-active').children().removeClass('active');
    $('#find-your-product-btn').parent().addClass('active');
    $('.section').removeClass('active');
    $('.search-page').addClass('active');
    $('#filters-apply-button').remove();
	$('.find-products-list .products-block').html('Please fill in the fields to search for products');
    searchFieldListeners();
};

const searchFieldListeners = () => {
    $('<button/>', {type: 'button', id: 'filters-apply-button', text: 'Apply Filter'})
        .addClass('button filter-button')
        .click(startSearching)
        .appendTo($('#filterProducts'));
};

const startSearching = () => {
    const brandValue = $('#filter-field-brand').val() || '';
    const modelValue = $('#filter-field-model').val() || '';
    const fromValue = $('#filter-field-from').val() || 0;
    const toValue = $('#filter-field-to').val() || Number.MAX_VALUE;

    fetch(productsUrl)
        .then(res => res.json())
        .then(res => {
            const productArr = [];
            res.forEach(product => {
                if (product.brand.toLowerCase().includes(brandValue.toLowerCase())
					&& product.model.toLowerCase().includes(modelValue.toLowerCase())
					&& product.price >= fromValue
					&& product.price <= toValue) {

                    productArr.push(product);
                }
            });
            createBlockOfProducts(productArr, '.find-products-list .row');
        });
};
;// const productsStartListener = () => {
//     $('#products-btn').click(createProducts);
// };

// const createProducts = event => {
//     event.preventDefault();
//     $('section').removeClass('active');
//     $('.all-products-page').addClass('active').html('');
//     const productsBlock = $('<div/>', {id: 'products-block'}).appendTo($('.all-products-page'));
//     productsBlock.append($('<div/>').addClass('container'));
//     fetch(productsUrl)
//         .then(res => {
//             return res.json();
//         })
//         .then(res => {
//             createBlockOfProducts(res);
//         })
//         .catch(reject => {
//             console.log("Ups");
//             console.log(reject);
//         });
// };

const createBlockOfProducts = (products, parentSelector = '.category-list .row') => {
	const parent = document.querySelector(parentSelector);
	parent.innerHTML = '';

	products.forEach(productItem => {
		const {id, categoryId, brand, model, price, img} = productItem;

		const card = document.createElement('div');
		card.classList.add("card", "card-product", "col-md-6", "col-lg-4");
		card.setAttribute('product-id', id);

		const image = document.createElement('img');
		image.setAttribute('src', img);
		image.style.height = '180px';

		const textContainer = document.createElement('div');
		textContainer.classList.add('card-body', 'text-center');

		const productName = document.createElement('h4');
		productName.className = 'brand-and-model';
		productName.textContent = `${brand} ${model}`;

		const productDescription = document.createElement('p');
		productDescription.className = 'card-product__price';
		productDescription.textContent = `${price} UAH`;

		card.appendChild(image);
		textContainer.appendChild(productName);
		textContainer.appendChild(productDescription);
		card.appendChild(textContainer);

		$('<button/>', {
			type: 'button',
			text: 'Add to cart',
			'data-id': id
		}).click(addProductToCart).addClass('button').appendTo(card);
		//
		card.addEventListener('click', function (e) {
			e.preventDefault();
			productIdForProductDetail = e.currentTarget.attributes['product-id'].value;
			window.location.hash = '#product-details';
		});
		parent.appendChild(card);

		// const card = $('<div/>', {
		//     'data-id': id,
		//     'category-id': categoryId
		// }).addClass('product-card').appendTo($('#products-block > .container'));
		// card.append($('<img>', {'src': img}))
		//     .append($('<div/>', {text: brand}))
		//     .append($('<div/>', {text: model}))
		//     .append($('<div/>', {text: `Price is: ${price}`}))
		//     .append($('<button/>', {type: 'button', text: 'Add to cart', 'data-id': id}).click(addProductToCart));
	})
};

const showProductsByCategory = (categoryId, filters) => {
	// const categoryId = category.querySelector('input').getAttribute('category-id');
	// $('#categories-block').remove();
	// const productsBlock = $('<div/>', {id: 'products-block'}).prependTo($('.all-products-page'));
	// productsBlock.append($('<div/>').addClass('container'));
	fetch(productsUrl)
			.then(res => {
				return res.json();
			})
			.then(res => {
				let highestPrice = 0;
				const productsByCategory = [];

				if (!filters) {
					res.find(product => {
						if (product.categoryId === categoryId) {
							productsByCategory.push(product);
	
							if (highestPrice < product.price) {
								highestPrice = product.price;
							}
						}
					});
				} else {
					res.find(product => {
						if (product.categoryId === categoryId) {
							filters.forEach(filter => { 
								if (product.brand === filter) {
									productsByCategory.push(product);

									if (highestPrice < product.price) {
										highestPrice = product.price;
									}
								}
							});
						}
					});
				}

				createBlockOfProducts(productsByCategory);
				showPriceRange(highestPrice, productsByCategory);
			})
			.catch(reject => {
				console.log("Oops");
				console.log(reject);
			});
};;const showProductDetail = () => {
    $('section').removeClass('active');
    $('.product-page').addClass('active');
    const addToCard = $('#add-to-cart-pd');

    const products = fetch(productsUrl)
        .then(res => res.json());

    const comments = fetch(commentsUrl)
        .then(res => res.json());

    Promise.all([products, comments]).then(([products, comments]) => {
        addToCard.unbind('click');
        products.forEach(product => {
            if (product.id === productIdForProductDetail) {
                createProductInfo(product);
            }
        });

        $('.review_list').children().remove();

        comments.forEach(comment => {
            if (comment.productId === productIdForProductDetail) {
                createProductComments(comment.comments)
            }
        })

        checkCommentsFromLocalStorage(productIdForProductDetail);

        addToCard.click(prepareAddProductToCart);
        $('#add-a-review').click(addReview);
    });
}

const checkCommentsFromLocalStorage = productId => {
    const commentsFromLocal = JSON.parse(localStorage.getItem('comments'));
    if (commentsFromLocal) {
        commentsFromLocal.forEach(comment => {
            if (productId === comment.productId) {
                createProductComments(comment.comments);
            }
        })
    }
}

const createProductInfo = async product => {
    const {id, categoryId, brand, model, price, img, description} = product;
    const imgParent = $('.single-prd-item');
    $('#product-detail-img').remove();
    $(`<img src="${img}" id="product-detail-img">`, {id: 'product-detail-img'}).addClass('img-fluid').appendTo(imgParent);

    const categoryName = await getCategoryName(categoryId);
    $('#category-in-product').remove();
    $('.s_product_text').prepend($('<a/>', {
        text: `Category: ${categoryName}`,
        id: 'category-in-product',
        'href': '#'
    }).click(goBack));
    $('#brand-model').text(`${brand} ${model}`);
    $('#product-info-price').text(`${price} UAH`);
    $('#product-description').text(description);
    $('#add-to-cart-pd').attr('data-id', id);
}

const goBack = (e) => {
    e.preventDefault();
    if ($('#check-go-back').children().length) {
        window.location.hash = '#category';
    } else {
		window.location.hash = '#categories';
	}
}

const getCategoryName = async (categoryId) => {
    let categoryName;
    await fetch(categoriesUrl)
        .then(res => res.json())
        .then(res => {
            res.forEach(item => {
                if (categoryId === item.id) {
                    categoryName = item.name;
                }
            })
        })
    return categoryName;
}

const prepareAddProductToCart = event => {
    event.preventDefault();
    const quantity = $('#sst').val();
    for (let i = 0; i < quantity; i++) {
        addProductToCart(event);
    }
}

const createProductComments = comments => {
    const commentsParent = $('.review_list');
    comments.forEach(commentItem => {
        const {user, userImg, comment} = commentItem;
        $('<div/>').addClass('review_item').append($('<div/>').addClass('media')
            .append($('<div/>').addClass('d-flex')
                .append($('<img/>', {'src': userImg || emptyProfileAvatar}))
            )
            .append($('<div/>').addClass('d-flex')
                .append($('<h4/>', {text: user})))
        )
            .append($('<p>', {text: comment}))
            .appendTo(commentsParent)
    })
}

const addReview = () => {
    const name = $('#name-to-review');
    const comment = $('#textarea');

    name.parent().removeClass('error');
    comment.parent().removeClass('error');

    if (isValidAddReview(name, comment)) {
        const productId = $('#add-to-cart-pd').attr('data-id');

        const userComment = [{id: "1", user: name.val(), userImg: emptyProfileAvatar, comment: comment.val()}];
        const userCommentsFromLocalStorage = JSON.parse(localStorage.getItem('comments'));

        const commentToLocal = [{id: rand(1, 1000), productId: productId, comments: userComment}]
        if (!userCommentsFromLocalStorage) {
            localStorage.setItem('comments', JSON.stringify(commentToLocal));
        } else {
            userCommentsFromLocalStorage.push(commentToLocal[0]);
            localStorage.setItem('comments', JSON.stringify(userCommentsFromLocalStorage));
        }

        createProductComments([{user: name.val(), comment: comment.val()}]);
        name.val('');
        comment.val('')
    }
}

const isValidAddReview = (name, comment) => {
    let isValid = true;
    const namePattern = /[A-Z]|[А-Я][a-z]|[а-я]{1,} [A-Z]|[А-Я][a-z]|[а-я]{1,}$/;
    if (!name.val()) {
        name.parent().addClass('error');
        isValid = false;
    }
    if (!comment.val()) {
        comment.parent().addClass('error');
        isValid = false;
    }
    if (!namePattern.test(name.val())) {
        name.parent().addClass('error');
        isValid = false;
    }
    return isValid;
};const startOfThePurchaseProcess = (e) => {
	e.preventDefault();
	const form = $('#checkout-form');
	const isMistakeInForm = validateForm(form);

	if (!isMistakeInForm) {
		window.location.hash = '#order-confirmation';
	}
}

const validateForm = form => {
	const firstNamePattern = /[A-Z]|[А-Я][a-z]|[а-я]{1,}$/;
	const lastNamePattern = /[A-Z]|[А-Я][a-z]|[а-я]{1,}$/;
	const companyName = /\w+|/;
	const phonePattern = /^([+]?[\s0-9]+)?(\d{3}|[(]?[0-9]+[)])?([-]?[\s]?[0-9])+$/;
	const mailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
	const addr1 = /\w{1,}/;
	const addr2 = /\w+|/;
	const city = /[A-ZА-Я][a-zа-я]{1,}/;
	const zip = /^\d{1,}$/;
	const cardPattern = /^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/;

	const validations = {
		firstname: function (field) {
			return firstNamePattern.test(field.value);
		},
		lastname: function (field) {
			return lastNamePattern.test(field.value);
		},
		company: function (field) {
			return companyName.test(field.value);
		},
		number: function (field) {
			return phonePattern.test(field.value);
		},
		compemailany: function (field) {
			return mailPattern.test(field.value);
		},
		add1: function (field) {
			return addr1.test(field.value);
		},
		add2: function (field) {
			return addr2.test(field.value);
		},
		city: function (field) {
			return city.test(field.value);
		},
		zip: function (field) {
			return zip.test(field.value);
		},
	}

	let isMistake = false;

	$('#checkout-form *').filter('.form-control').toArray().forEach(input => {
		const validator = validations[input.name];
		if (validator && !validator(input)) {
			input.parentElement.classList.add('error');
			isMistake = true;
		} else {
			input.parentElement.classList.remove('error');
		}
	});

	const cardField = $('#card-field');
	const cardFieldParent = $('#card-field-parent');

	if ($('#f-option6').prop('checked')) {
		if (!cardPattern.test(cardField.val())) {
			isMistake = true
			cardFieldParent.addClass('error');
		} else {
			cardFieldParent.removeClass('error');
		}
	}

	let isConfirm = $('#isconfirm');

	if (!isConfirm.prop('checked')) {
		isMistake = true;
		isConfirm.parent().addClass('error');
	} else {
		isConfirm.parent().removeClass('error');
	}

	return isMistake;
};const checkOutListener = () => {
	hideModalCart();
	$('section').removeClass('active');
	$('.checkout_area').addClass('active');

	fillYourOrder();

	$('#f-option6').click(createCardField);
	$('#f-option5').click(deleteCardField);

	$('.button-paypal').click(startOfThePurchaseProcess);
}

const deleteCardField = () => {
	$('#card-field-parent').remove();
}

const createCardField = () => {
	$('#card-field-parent').remove();
	$('#checkout-form').append($('<div/>', {id: 'card-field-parent'}).addClass('col-md-6 form-group')
			.append($('<input>', {
				id: 'card-field',
				type: 'text',
				placeholder: 'Card number*',
				name: 'cardfield'
			}).addClass('form-control')))
}

const fillYourOrder = () => {
	const cart = JSON.parse(localStorage.getItem('cart'));
	let totalPrice = 0;
	$('#order-products').children().not(':first-child').remove();

	fetch(productsUrl)
			.then(res => res.json())
			.then(res => {
				res.forEach(product => {
					cart.forEach(productInCart => {
						if (productInCart.productId === product.id) {
							createProductInOrder(product, productInCart.count);
							totalPrice += product.price * productInCart.count;
						}
					})
				});
				$('#total-in-order').text(`${totalPrice} UAH`);

				if (totalPrice === 0) {
					document.querySelector('.button-paypal').style.display = 'none';
				} else {
					document.querySelector('.button-paypal').style.display = 'inline-block';
				}
			});
}

const createProductInOrder = (product, count) => {
	$('#order-products')
			.append($('<div/>').addClass('checkout-products')
					// .append($('<div/>').addClass('product-in-order-card')
					.append($('<span/>', {text: `${product.brand} ${product.model}`}).addClass('checkout-product-name'))
					// .append($('<span/>', {text: product.model}))
					.append($('<span/>', {text: ` x${count}`}))
					.append($('<span/>', {text: ` ${count * product.price} UAH`}))
			);
};const productWasSuccessfullyPurchased = () => {
	$('section').removeClass('active');
	$('.order_details').addClass('active');

	$('#go-to-home').click(goHome);

	setOrderInfo();
	setBillingAddress();
	fillOrderDetails();

	clearLocalStorage();
	changeCountOfCardIcon(0);
}

const clearLocalStorage = () => {
	localStorage.setItem('cart', JSON.stringify([]));
}

const setOrderInfo = () => {
	$('#order-number').text(`: ${rand(10000, 99999)}`);
	$('#order-date').text(`: ${Date().toLocaleString().replace(/:\d{2}\s.*/, ' ')}`);
	$('#order-total').text(`: ${$('#total-in-order').text()}`);
	const payMethod = $('#f-option5').prop('checked') ? ': Check Payments' : ': PayPal';
	$('#order-paymethod').text(payMethod);
}

const setBillingAddress = () => {
	$('#order-street').text(`: ${$('#add1').val()}`);
	$('#order-city').text(`: ${$('#city').val()}`);
	$('#order-country').text(`: ${$('.country_select').val()}`);
	$('#order-zip').text(`: ${$('#zip').val()}`);
}

const fillOrderDetails = () => {
	const orderProducts = $('#order-products-bottom');
	orderProducts.children().remove();
	const productBlock = createProductBlock()
	orderProducts.append(productBlock);
}

const createProductBlock = () => {
	const productBlock = document.querySelector('#order-products-bottom');

	const products = document.querySelectorAll('#order-products')[0].children;

	for (let i = 1; i < products.length; i++) {
		const row = document.createElement('tr');

		for (let j = 0; j < products[i].children.length; j++) {
			const cell = document.createElement('td');
			cell.textContent = products[i].children[j].textContent;

			row.appendChild(cell);
		}

		productBlock.appendChild(row);
	}

	const row = document.createElement('tr');
	const total1 = document.createElement('td');
	const total2 = document.createElement('td');
	const total3 = document.createElement('td');
	const totalSum = document.querySelector('#total-in-order').textContent;

	total1.textContent = 'TOTAL'
	row.appendChild(total1);

	total2.textContent = ' '
	row.appendChild(total2);

	total3.textContent = totalSum;
	row.appendChild(total3);

	productBlock.appendChild(row);

	// $('#order-products').children().not(':first-child').each(function () {
	// 	$('<tr/>').append($('<td>').append($('<p/>', {text: `${$(this).children().text()}`}))).appendTo(productBlock);
	// });
	return productBlock;
}

const rand = (min, max) => {
	return Math.floor(Math.random() * (max - min + 1)) + min;
}

const goHome = event => {
	event.preventDefault();
	$('section').removeClass('active');
	$('.home-page').addClass('active');
};function initRouting() {
    switch (location.hash) {
        case '':
            $('#check-active').children().removeClass('active').filter(':first-child').addClass('active');
            $('.section').removeClass('active');
            $('.home-page').addClass('active');
            break;
        case '#categories':
            createCategories();
            break;
        case '#category':
            showCategories();
            break;
        case '#product-details':
            showProductDetail();
            break;
        case '#checkout':
            checkOutListener();
            break;
        case '#order-confirmation':
            productWasSuccessfullyPurchased();
            break;
        case '#search':
            showSearchingPage();
            break;
    }
};window.addEventListener("load", () => {
	window.location.hash = '';
})

categoriesStartListener();
// productsStartListener();
initLocalStorage();
cartListener();
findYourProductListener();
window.addEventListener('hashchange', initRouting);

